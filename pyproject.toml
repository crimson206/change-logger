[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "change-logger"
dynamic = ["version"]
description = "A sample Python package with semantic release"
readme = "README.md"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
dependencies = [
    # 여기에 프로젝트 의존성 추가
]

[project.optional-dependencies]
dev = [
    "python-semantic-release>=9.0.0",
    "pytest>=7.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/my-python-package"
Repository = "https://github.com/yourusername/my-python-package"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "change_logger.__version__"}

# ===== Python Semantic Release 설정 =====
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "src/change_logger/__init__.py:__version__",
]
build_command = "pip install build && python -m build"

plugins = [
    "@semantic-release/commit-analyzer",
    "@semantic-release/release-notes-generator",
    ["@semantic-release/changelog", {"changelogFile"="CHANGELOG.md"}],
    "@semantic-release/git",
    "@semantic-release/github",
    # 필요하다면 다른 플러그인 추가:
    # "@semantic-release/pypi",
]

# 커밋 컨벤션 설정
[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

# Changelog 설정
[tool.semantic_release.changelog.default_templates]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
include_commit_body = true
exclude_commit_patterns = [
    "^build:",
    "^chore:",
    "^ci:",
    "^docs:",
    "^style:",
    "^test:",
]

# 브랜치 설정
[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

# 원격 저장소 설정
[tool.semantic_release.remote]
name = "origin"
token = { env = "GH_TOKEN" }

# 배포 설정
[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
